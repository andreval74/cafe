// deploy.js
// Deploy do contrato na blockchain via ethers.js + MetaMask
// v2.1.0 - Integrado com network-manager

import { marcarConcluido } from './add-utils.js';
import { contratoAbi, contratoBytecode, contratoSource, contratoName, resolvedCompilerVersion } from './add-contratos-verified.js';
import { saveDeployedContract, detectCurrentNetwork, currentNetwork } from './network-manager.js';

/**
 * Faz o deploy do contrato usando ethers.js e MetaMask.
 * @param {HTMLElement} btnDeploy
 * @param {HTMLElement} deployStatus
 */
export async function deployContrato(btnDeploy, deployStatus) {
  btnDeploy.disabled = true;
  deployStatus.textContent = "Preparando deploy...";
  
  try {
    // Detecta rede atual
    await detectCurrentNetwork();
    
    // Valida√ß√µes antes do deploy
    if (!contratoAbi || !contratoBytecode) {
      throw new Error("Contrato n√£o foi compilado. Compile primeiro!");
    }

    if (!contratoSource || !contratoName) {
      throw new Error("Informa√ß√µes do contrato incompletas!");
    }
    
    console.log('üîç Debug deploy:');
    console.log('ABI:', contratoAbi ? `Presente (${contratoAbi.length} fun√ß√µes)` : 'NULL');
    console.log('Bytecode:', contratoBytecode ? `Presente (${contratoBytecode.length} chars)` : 'NULL');
    console.log('Rede:', currentNetwork ? currentNetwork.name : 'N√£o detectada');
    console.log('Compiler Version:', resolvedCompilerVersion || 'N√£o dispon√≠vel');
    
    if (!window.ethereum) throw new Error("MetaMask n√£o encontrada");
    
    deployStatus.textContent = "Conectando com MetaMask...";
    await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();

    // Adapte conforme construtor do seu contrato
    let args = [];
    
    deployStatus.textContent = `Criando contrato na ${currentNetwork?.name || 'rede atual'}...`;
    console.log('üè≠ Criando ContractFactory...');
    const factory = new ethers.ContractFactory(contratoAbi, contratoBytecode, signer);
    
    deployStatus.textContent = "Enviando transa√ß√£o de deploy...";
    console.log('üöÄ Enviando deploy...');
    const contract = await factory.deploy(...args);
    
    deployStatus.textContent = "Aguardando confirma√ß√£o do deploy...";
    console.log('‚è≥ Aguardando confirma√ß√£o...');
    await contract.deployTransaction.wait();
    
    console.log('‚úÖ Deploy conclu√≠do:', contract.address);
    console.log('üåê Rede:', currentNetwork?.name);
    console.log('üîó Explorer:', currentNetwork?.blockExplorer ? `${currentNetwork.blockExplorer}/address/${contract.address}` : 'N/A');
    
    // Salva informa√ß√µes do contrato deployado para verifica√ß√£o
    const deployedInfo = saveDeployedContract(
      contract.address,
      contratoAbi,
      contratoBytecode,
      contratoSource,
      resolvedCompilerVersion || 'latest',
      contratoName
    );
    
    marcarConcluido(btnDeploy);
    deployStatus.innerHTML = `
      ‚úÖ Deploy conclu√≠do!<br>
      <small>Endere√ßo: ${contract.address}</small><br>
      <small>Rede: ${currentNetwork?.name || 'Desconhecida'}</small>
    `;
    deployStatus.style.color = '#16924b';

    // Define endere√ßo global para retrocompatibilidade
    window.contractAddress = contract.address;
    
    // Habilita pr√≥ximo passo se existir
    if (document.getElementById('next-step-4')) {
      document.getElementById('next-step-4').style.display = "inline-block";
    }

    // Habilita bot√£o de verifica√ß√£o ap√≥s deploy
    const verificationBtn = document.getElementById('btn-verification-info');
    if (verificationBtn) {
      verificationBtn.style.display = 'inline-block';
      verificationBtn.disabled = false;
      verificationBtn.textContent = 'üîç Verificar Contrato';
    }

    // Dispara evento personalizado para notificar outros componentes
    window.dispatchEvent(new CustomEvent('contractDeployed', { 
      detail: deployedInfo 
    }));

    return contract.address;
    
  } catch (error) {
    console.error('‚ùå Erro no deploy:', error);
    deployStatus.textContent = "‚ùå " + error.message;
    deployStatus.style.color = '#b91c1c';
    btnDeploy.disabled = false;
    throw error;
  }
}